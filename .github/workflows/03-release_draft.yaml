name: Release draft

on:
  push:
    branches:
      - main
      - "release/**"
  workflow_call:
    inputs:
      environments:
        description: 'JSON array of string values to iterate (e.g., ''["pypi", "gemfury"]'' or ''["npm", "docker"]''). Each string becomes matrix.env and is passed to prepare-env as environment.'
        required: false
        type: string
        default: '["default"]'

jobs:
  release_draft:
    strategy:
      fail-fast: false
      matrix:
        env: ${{ inputs.environments && fromJSON(inputs.environments) || fromJSON('["CI/CD"]') }}

    name: Create / Update draft release
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure tags are present
        run: |
          git fetch --tags --force

      - name: Determine branch context
        id: branch-context
        run: |
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          echo "branch=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Verify Author
        id: check-author
        run: |
          AUTHOR=$(git log -1 --pretty=format:'%ae')
          if [ "$AUTHOR" = "actions@github.com" ]; then
            echo "is-bot=true" >> $GITHUB_OUTPUT
          else
            echo "is-bot=false" >> $GITHUB_OUTPUT
          fi

      - name: Run Release Drafter
        if: steps.check-author.outputs.is-bot == 'false'
        uses: release-drafter/release-drafter@v6
        with:
          disable-autolabeler: true
          commitish: ${{ steps.branch-context.outputs.branch }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update_project_version:
    needs: release_draft
    name: Update project version
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        env: ${{ inputs.environments && fromJSON(inputs.environments) || fromJSON('["CI/CD"]') }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine branch context
        id: branch-context
        run: |
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          echo "branch=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Get latest release version
        id: get-latest-release
        uses: actions/github-script@v6
        with:
          script: |
            const allReleases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            if (allReleases.data.length === 0) {
              core.info('No previous releases found');
              core.setOutput('tag_name', '');
              return;
            }
            const latestRelease = allReleases.data[0];
            const tagName = latestRelease.tag_name;
            core.info(`Latest release tag name: ${tagName}`);
            const sanitizedTagName = tagName.replace(/[^0-9.]/g, '');
            core.info(`version to update: ${sanitizedTagName}`);
            core.setOutput('tag_name', sanitizedTagName);

      - name: Prepare environment
        uses: ./.github/actions/prepare-env
        with:
          environment: ${{ matrix.env }}

      - name: Update project version
        run: |
          VERSION=${{ steps.get-latest-release.outputs.tag_name }}
          echo "Updating version to $VERSION"
          if [ -n "$VERSION" ]; then
            make update-version VERSION=$VERSION
          fi

      - name: Update branch with the new version
        run: |
          BRANCH_NAME="${{ steps.branch-context.outputs.branch }}"
          git checkout "$BRANCH_NAME"
          if git diff --quiet; then
            echo "No changes detected. No commit or push will be performed."
          else
            git config user.name "GitHub Actions"
            git config user.email "actions@github.com"
            git add .
            git commit -m "chore: Update version to ${{ steps.get-latest-release.outputs.tag_name }}"
            git push origin "$BRANCH_NAME"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
